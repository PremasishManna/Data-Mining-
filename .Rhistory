Boston[['medv']] <- ordered(cut(Boston[['medv']], c(0,20,60)), labels = c("Moderate class","High class"))
Boston[['black']] <- ordered(cut(Boston[['black']], c(0,356,397)), labels = c("Less black","More black"))
### Binary Incidence matrix transformation #####
Boston_Inci <- as(Boston,"transactions")
#### Displaying the item frequency plot ######
itemFrequencyPlot(Boston_transformed, support = 0.08,  cex.names = 0.8)
##### Implementing apriori algorithm ########
rules <- apriori(Boston_Inci, parameter = list(support = 0.005, confidence = 0.4))
summary(rules)
#### Solution Part c####
student_pref= subset(rules,(rhs %in% c("crim=Lowcrime","dis=Neartoworkplace")))
inspect(head(sort(student_pref, by = "confidence"), n=3))
#### Solution Part d####
family_pref <- subset(rules, (rhs %in% "ptratio=Lowp/tratio"  & lift > 1))
inspect(head(sort(family_pref, by = "confidence"), n=3))
##########regression Model######
Model_test<- glm(ptratio~.,data = train_data, family ="binomial")
##########regression Model######
train_data[['ptratio']] <- ordered(cut(train_data[['ptratio']], c(0,15,30)), labels = c(0,1))
View(train_data)
Model_test<- glm(ptratio~.,data = train_data, family ="binomial")       # Training the linear model
summary(Model_test)
lm.pred <- predict(Model4_lm, newdata = test_set, type = 'response')            # checking prediction using test set
lm.pred <- predict(Model_test, newdata = test_set, type = 'response')            # checking prediction using test set
lm.pred <- predict(Model_test, newdata = train_data, type = 'response')            # checking prediction using test set
for(i in lm.pred){
if(i>0.5)
train_data$predict=1
else
train_data$predict=0
}
View(train_data)
lm.pred
predicted= c(lm.pred)
lm.pred <- predict(Model_test, newdata = train_data, type = 'response')            # checking prediction using test set
for(i in lm.pred){
if(i>0.7)
train_data$predict=1
else
train_data$predict=0
}
load("C:/Users/Shan/Desktop/Spring 22/Data Mining 2/Homework 1/marketing.RData")
########### Question 2##########
str(marketing)
Income <- as.integer(runif(8993, min = min(marketing$Income), max = max(marketing$Income)))
Sex <- as.integer(runif(8993, min = min(marketing$Sex), max = max(marketing$Sex)))
Marital <- as.integer(runif(8993, min = min(marketing$Marital, na.rm = TRUE), max = max(marketing$Marital, na.rm = TRUE)))
Age <- as.integer(runif(8993, min = min(marketing$Age),max = max(marketing$Age)))
Edu <- as.integer(runif(8993, min = min(marketing$Edu, na.rm = TRUE), max = max(marketing$Edu, na.rm = TRUE)))
Edu <- as.integer(runif(8993, min = min(marketing$Edu, na.rm = TRUE), max = max(marketing$Edu, na.rm = TRUE)))
Occupation <- as.integer(runif(8993,min = min(marketing$Occupation,na.rm = TRUE), max = max(marketing$Occupation,na.rm = TRUE)))
Lived <- as.integer(runif(8993, min = min(marketing$Lived, na.rm = TRUE), max = max(marketing$Lived, na.rm = TRUE)))
Dual_Income <- as.integer(runif(8993, min = min(marketing$Dual_Income),max = max(marketing$Dual_Income) ))
Household <-as.integer(runif(8993, min = min(marketing$Household, na.rm = TRUE), max = max(marketing$Household, na.rm = TRUE) ))
Householdu18 <-as.integer(runif(8993, min = min(marketing$Householdu18, na.rm = TRUE), max = max(marketing$Householdu18, na.rm = TRUE) ))
Status <-as.integer(runif(8993, min = min(marketing$Status, na.rm = TRUE), max = max(marketing$Status, na.rm = TRUE)))
Home_Type <-as.integer( runif(8993, min = min(marketing$Home_Type, na.rm = TRUE), max = max(marketing$Home_Type, na.rm = TRUE)))
Ethnic <- as.integer(runif(8993, min = min(marketing$Ethnic, na.rm = TRUE), max = max(marketing$Ethnic, na.rm = TRUE)))
Language <- as.integer(runif(8993, min = min(marketing$Language, na.rm = TRUE), max = max(marketing$Language, na.rm = TRUE) ))
plot(Income)
ref_set <- cbind(Income,Sex,Marital,Age,Edu,Occupation,Lived,Dual_Income,Household,Householdu18,Status,Home_Type,Ethnic,Language)
ref_set <- as.data.frame(ref_matrix)
ref_set <- as.data.frame(ref_set)
View(ref_set)
table(is.na(ref_full))
ref_full <- rbind(marketing,ref_set)
table(is.na(ref_full))
full_matrix = na.omit(ref_full)
ref_full = na.omit(ref_full)
table(is.na(ref_full))
install.packages("rpart")
library(rpart)
control=rpart.control(minsplit=30, cp=0)
fit <- rpart(Response~.,method="class", data=full_matrix_u, maxdepth = 15, control = control)
fit <- rpart(Response~.,method="class", data=ref_full, maxdepth = 15, control = control)
ref_set <- cbind(Income,Sex,Marital,Age,Edu,Occupation,Lived,Dual_Income,Household,Householdu18,Status,Home_Type,Ethnic,Language)
ref_set <- as.data.frame(ref_set)
marketing$Response <- 1
ref_set$Response <- 0
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=30, cp=0)
fit <- rpart(Response~.,method="class", data=ref_full, maxdepth = 15, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
install.packages("rattle")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=10, cp=0)
fit <- rpart(Response~.,method="class", data=ref_full, maxdepth = 15, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=30, cp=0)
fit <- rpart(Response~.,method="class", data=ref_full, maxdepth = 15, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=30, cp=0)
fit <- rpart(Response~.,method="class", data=ref_full, maxdepth = 10, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=30, cp=0)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=4, cp=0)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
control=rpart.control(minsplit=50, cp=0)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=4, minbucket = 2,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
Boston_Inci@itemInfo[["labels"]]
max(ref_full[['Lived']])
View(fit)
fit[["frame"]][["yval2"]]
nrow(ref_full)
count(ref_full[["Lived"]])
count(ref_full[["Lived"]]>4.5)
nrow(ref_full[["Lived"]]>4.5)
ref_full[["Lived"]]>4.5
sum(ref_full[["Lived"]]>4.5)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=4, minbucket = 2,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=4, minbucket = 4,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
str(marketing)
Income <- as.integer(runif(8993, min = min(marketing$Income), max = max(marketing$Income)))
Sex <- as.integer(runif(8993, min = min(marketing$Sex), max = max(marketing$Sex)))
Marital <- as.integer(runif(8993, min = min(marketing$Marital, na.rm = TRUE), max = max(marketing$Marital, na.rm = TRUE)))
Age <- as.integer(runif(8993, min = min(marketing$Age),max = max(marketing$Age)))
Edu <- as.integer(runif(8993, min = min(marketing$Edu, na.rm = TRUE), max = max(marketing$Edu, na.rm = TRUE)))
Occupation <- as.integer(runif(8993,min = min(marketing$Occupation,na.rm = TRUE), max = max(marketing$Occupation,na.rm = TRUE)))
Lived <- as.integer(runif(8993, min = min(marketing$Lived, na.rm = TRUE), max = max(marketing$Lived, na.rm = TRUE)))
Dual_Income <- as.integer(runif(8993, min = min(marketing$Dual_Income),max = max(marketing$Dual_Income) ))
Household <-as.integer(runif(8993, min = min(marketing$Household, na.rm = TRUE), max = max(marketing$Household, na.rm = TRUE) ))
Householdu18 <-as.integer(runif(8993, min = min(marketing$Householdu18, na.rm = TRUE), max = max(marketing$Householdu18, na.rm = TRUE) ))
Status <-as.integer(runif(8993, min = min(marketing$Status, na.rm = TRUE), max = max(marketing$Status, na.rm = TRUE)))
Home_Type <-as.integer( runif(8993, min = min(marketing$Home_Type, na.rm = TRUE), max = max(marketing$Home_Type, na.rm = TRUE)))
Ethnic <- as.integer(runif(8993, min = min(marketing$Ethnic, na.rm = TRUE), max = max(marketing$Ethnic, na.rm = TRUE)))
Language <- as.integer(runif(8993, min = min(marketing$Language, na.rm = TRUE), max = max(marketing$Language, na.rm = TRUE) ))
plot(Income)### checking individual plot
### creating merged matrix #####
ref_set <- cbind(Income,Sex,Marital,Age,Edu,Occupation,Lived,Dual_Income,Household,Householdu18,Status,Home_Type,Ethnic,Language)
ref_set <- as.data.frame(ref_set)
marketing$Response <- 1
ref_set$Response <- 0
### stacking the data frames original and reference
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=4, minbucket = 4,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=10, minbucket = 4,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=10, minbucket = 4,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
min(train_data[['ptratio']])
min(lm.pred)
model_test$predict=ifelse(lm.pred>0.5,1,0)
Model_test$predict=ifelse(lm.pred>0.5,1,0)
View(Model_test)
train_data$predict=ifelse(lm.pred>0.5,1,0)
View(train_data)
install.packages('caret')
##########regression Model######
library(caret)
confusionMatrix(train_data$predic,lm.pred)
confusionMatrix(train_data$predict,lm.pred)
confusionMatrix(train_data$predict,train_data$ptratio)
rm(list=ls())
rm(list=ls())
library(ISLR2)
data(College)
head(College)
df1= College[2:ncol(College)]  ### Copying only the numeric inputs to df1 dataset
#******************* Pair plot and Histogram *********#
library(GGALLY)
install.packages("ISLR2")   ### Installing ISLR 2 package to retrieve data for Q1 and Q3
install.packages("ISLR2")
min(lm.pred)
install.packages("GGally")   ### Pair Plot usage
install.packages("GGally")
install.packages("MASS")
install.packages("arules")
install.packages("rpart")
install.packages("rattle")
install.packages('caret')
setwd("C:/Users/Shan/Desktop/Spring 22/Data Mining 2/Homework 1/Homework1") ### Setting directory for the program
getwd()
library(ISLR2)
data(College)
head(College)
df1= College[2:ncol(College)]  ### Copying only the numeric inputs to df1 dataset
#******************* Pair plot and Histogram *********#
library(GGALLY)
#******************* Pair plot and Histogram *********#
library(GGALLY)
#******************* Pair plot and Histogram *********#
library(GGally)
GGally::ggpairs(df1)   ## Pair plot or dependency plot of each variable
#********************* Data transformation ******#
df2= log(df1)  ### Performing Log transform of the data
par(mfrow= c(4,4))
for(i in 1:ncol(df2)){  ### Visualizing the transformed data using Histogram
hist(df2[,i],xlab=colnames(df2[i]),main= " ")}
private= subset(College, College$Private =='Yes')
public=  subset(College, College$Private !='Yes')
save.image("C:/Users/Shan/Desktop/Spring 22/Data Mining 2/Homework 1/Homework1/Public and Private_data.RData")
par(mfrow=c(1,1))
hist(public$Grad.Rate)
max(public$Grad.Rate)
mean(public$Grad.Rate,na.rm= FALSE)
boxplot(public$Grad.Rate,notch = TRUE )
median(public$Grad.Rate, na.ram= TRUE)
rm(list=ls())
########### Question 2##########
str(marketing)
Income <- as.integer(runif(8993, min = min(marketing$Income), max = max(marketing$Income)))
Sex <- as.integer(runif(8993, min = min(marketing$Sex), max = max(marketing$Sex)))
Marital <- as.integer(runif(8993, min = min(marketing$Marital, na.rm = TRUE), max = max(marketing$Marital, na.rm = TRUE)))
Age <- as.integer(runif(8993, min = min(marketing$Age),max = max(marketing$Age)))
Edu <- as.integer(runif(8993, min = min(marketing$Edu, na.rm = TRUE), max = max(marketing$Edu, na.rm = TRUE)))
Occupation <- as.integer(runif(8993,min = min(marketing$Occupation,na.rm = TRUE), max = max(marketing$Occupation,na.rm = TRUE)))
Lived <- as.integer(runif(8993, min = min(marketing$Lived, na.rm = TRUE), max = max(marketing$Lived, na.rm = TRUE)))
Dual_Income <- as.integer(runif(8993, min = min(marketing$Dual_Income),max = max(marketing$Dual_Income) ))
Household <-as.integer(runif(8993, min = min(marketing$Household, na.rm = TRUE), max = max(marketing$Household, na.rm = TRUE) ))
Householdu18 <-as.integer(runif(8993, min = min(marketing$Householdu18, na.rm = TRUE), max = max(marketing$Householdu18, na.rm = TRUE) ))
Status <-as.integer(runif(8993, min = min(marketing$Status, na.rm = TRUE), max = max(marketing$Status, na.rm = TRUE)))
Home_Type <-as.integer( runif(8993, min = min(marketing$Home_Type, na.rm = TRUE), max = max(marketing$Home_Type, na.rm = TRUE)))
Ethnic <- as.integer(runif(8993, min = min(marketing$Ethnic, na.rm = TRUE), max = max(marketing$Ethnic, na.rm = TRUE)))
Language <- as.integer(runif(8993, min = min(marketing$Language, na.rm = TRUE), max = max(marketing$Language, na.rm = TRUE) ))
plot(Income)### checking individual plot
### creating merged matrix #####
ref_set <- cbind(Income,Sex,Marital,Age,Edu,Occupation,Lived,Dual_Income,Household,Householdu18,Status,Home_Type,Ethnic,Language)
ref_set <- as.data.frame(ref_set)
marketing$Response <- 1
ref_set$Response <- 0
### stacking the data frames original and reference
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=10, minbucket = 4,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
#### plotting the decision tree model ######
fancyRpartPlot(fit, caption = NULL)
########### Question 2##########
str(marketing)
install.packages("ISLR2")   ### Installing ISLR 2 package to retrieve data for Q1 and Q3
install.packages("GGally")   ### Pair Plot usage
install.packages("MASS")
install.packages("arules")
install.packages("rpart")
install.packages("rattle")
install.packages('caret')
install.packages("ISLR2")
install.packages("GGally")
install.packages("rpart")
install.packages("rattle")
install.packages("GGally")
install.packages("rpart")
install.packages("rattle")
########### Question 2##########
str(marketing)
Income <- as.integer(runif(8993, min = min(marketing$Income), max = max(marketing$Income)))
Sex <- as.integer(runif(8993, min = min(marketing$Sex), max = max(marketing$Sex)))
Marital <- as.integer(runif(8993, min = min(marketing$Marital, na.rm = TRUE), max = max(marketing$Marital, na.rm = TRUE)))
Age <- as.integer(runif(8993, min = min(marketing$Age),max = max(marketing$Age)))
Edu <- as.integer(runif(8993, min = min(marketing$Edu, na.rm = TRUE), max = max(marketing$Edu, na.rm = TRUE)))
Occupation <- as.integer(runif(8993,min = min(marketing$Occupation,na.rm = TRUE), max = max(marketing$Occupation,na.rm = TRUE)))
Lived <- as.integer(runif(8993, min = min(marketing$Lived, na.rm = TRUE), max = max(marketing$Lived, na.rm = TRUE)))
Dual_Income <- as.integer(runif(8993, min = min(marketing$Dual_Income),max = max(marketing$Dual_Income) ))
Household <-as.integer(runif(8993, min = min(marketing$Household, na.rm = TRUE), max = max(marketing$Household, na.rm = TRUE) ))
Householdu18 <-as.integer(runif(8993, min = min(marketing$Householdu18, na.rm = TRUE), max = max(marketing$Householdu18, na.rm = TRUE) ))
Status <-as.integer(runif(8993, min = min(marketing$Status, na.rm = TRUE), max = max(marketing$Status, na.rm = TRUE)))
Home_Type <-as.integer( runif(8993, min = min(marketing$Home_Type, na.rm = TRUE), max = max(marketing$Home_Type, na.rm = TRUE)))
Ethnic <- as.integer(runif(8993, min = min(marketing$Ethnic, na.rm = TRUE), max = max(marketing$Ethnic, na.rm = TRUE)))
Language <- as.integer(runif(8993, min = min(marketing$Language, na.rm = TRUE), max = max(marketing$Language, na.rm = TRUE) ))
load("C:/Users/Shan/Desktop/Spring 22/Data Mining 2/Homework 1/marketing.RData")
str(marketing)
Income <- as.integer(runif(8993, min = min(marketing$Income), max = max(marketing$Income)))
Sex <- as.integer(runif(8993, min = min(marketing$Sex), max = max(marketing$Sex)))
Marital <- as.integer(runif(8993, min = min(marketing$Marital, na.rm = TRUE), max = max(marketing$Marital, na.rm = TRUE)))
Age <- as.integer(runif(8993, min = min(marketing$Age),max = max(marketing$Age)))
Edu <- as.integer(runif(8993, min = min(marketing$Edu, na.rm = TRUE), max = max(marketing$Edu, na.rm = TRUE)))
Occupation <- as.integer(runif(8993,min = min(marketing$Occupation,na.rm = TRUE), max = max(marketing$Occupation,na.rm = TRUE)))
Lived <- as.integer(runif(8993, min = min(marketing$Lived, na.rm = TRUE), max = max(marketing$Lived, na.rm = TRUE)))
Dual_Income <- as.integer(runif(8993, min = min(marketing$Dual_Income),max = max(marketing$Dual_Income) ))
Household <-as.integer(runif(8993, min = min(marketing$Household, na.rm = TRUE), max = max(marketing$Household, na.rm = TRUE) ))
Householdu18 <-as.integer(runif(8993, min = min(marketing$Householdu18, na.rm = TRUE), max = max(marketing$Householdu18, na.rm = TRUE) ))
Status <-as.integer(runif(8993, min = min(marketing$Status, na.rm = TRUE), max = max(marketing$Status, na.rm = TRUE)))
Home_Type <-as.integer( runif(8993, min = min(marketing$Home_Type, na.rm = TRUE), max = max(marketing$Home_Type, na.rm = TRUE)))
Ethnic <- as.integer(runif(8993, min = min(marketing$Ethnic, na.rm = TRUE), max = max(marketing$Ethnic, na.rm = TRUE)))
Language <- as.integer(runif(8993, min = min(marketing$Language, na.rm = TRUE), max = max(marketing$Language, na.rm = TRUE) ))
plot(Income)### checking individual plot
ref_set <- cbind(Income,Sex,Marital,Age,Edu,Occupation,Lived,Dual_Income,Household,Householdu18,Status,Home_Type,Ethnic,Language)
ref_set <- as.data.frame(ref_set)
marketing$Response <- 1
ref_set$Response <- 0
### stacking the data frames original and reference
ref_full = rbind(marketing,ref_set)
table(is.na(ref_full))
ref_full = na.omit(ref_full)
library(rpart)
control=rpart.control(minsplit=10, minbucket = 4,xval = 10)
fit <- rpart(Response~.,method="class", data=ref_full, control = control)
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit, caption = NULL)
rm(list=ls())
install.packages("ISLR2")   ### Installing ISLR 2 package to retrieve data for Q1 and Q3
install.packages("ISLR2")
install.packages("GGally")   ### Pair Plot usage
install.packages("MASS")
install.packages("arules")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rattle")
library(ISLR2)
library(MASS)
library(arules)
data(Boston)
head(Boston)
str(Boston)
summary(Boston)
table(is.na(Boston))
train_data= Boston
### Removing ambiguous Parameters from the data set #######
Boston[['zn']] = NULL
Boston[['chas']] =NULL
Boston[['indus']] = NULL
Boston[['lstat']] = NULL
Boston[['rad']] = NULL
str(Boston)
hist(Boston[['black']])
max(Boston[['black']])
table(Boston[['black']]<356)
#### Displaying the item frequency plot ######
itemFrequencyPlot(Boston_transformed, support = 0.08,  cex.names = 0.8)
Boston[['crim']] <- ordered(cut(Boston[['crim']], c(0,0.06,100)),labels = c("Lowcrime", "Highcrime") )
Boston[['nox']] <- ordered(cut(Boston[['nox']], c(0,0.5,0.7,1)), labels = c(" safe ", "high", "Toxic"))
Boston[['rm']] <- ordered(cut(Boston[['rm']], c(0,7,10)), labels = c("Small house","Large house"))
Boston[['age']]  <- ordered(cut(Boston[['age']], c(1,19,45,55,100)), labels = c("Teenager", "Adult","Middle Age","Elderly"))
Boston[['dis']] <- ordered(cut(Boston[['dis']], c(0,4,10)), labels = c("Neartoworkplace", "farfromworkplace"))
Boston[['tax']] <- ordered(cut(Boston[['tax']], c(0,350,800)), labels = c("Low tax","High tax"))
Boston[['ptratio']] <- ordered(cut(Boston[['ptratio']], c(0,15,30)), labels = c("Lowp/tratio","Highp/tratio"))
Boston[['medv']] <- ordered(cut(Boston[['medv']], c(0,20,60)), labels = c("Moderate class","High class"))
Boston[['black']] <- ordered(cut(Boston[['black']], c(0,356,397)), labels = c("Less black","More black"))
### Binary Incidence matrix transformation #####
Boston_Inci <- as(Boston,"transactions")
#### Displaying the item frequency plot ######
itemFrequencyPlot(Boston_transformed, support = 0.08,  cex.names = 0.8)
#### Displaying the item frequency plot ######
itemFrequencyPlot(Boston_Inci, support = 0.08,  cex.names = 0.8)
rules <- apriori(Boston_Inci, parameter = list(support = 0.005, confidence = 0.4))
summary(rules)
#### Solution Part c####
student_pref= subset(rules,(rhs %in% c("crim=Lowcrime","dis=Neartoworkplace")))
inspect(head(sort(student_pref, by = "confidence"), n=3))
student_pref= subset(rules,(rhs %in% c("crim=Lowcrime","dis=Neartoworkplace")))
inspect(head(sort(student_pref, by = "confidence"), n=5))
family_pref <- subset(rules, (rhs %in% "ptratio=Lowp/tratio"  & lift > 1))
inspect(head(sort(family_pref, by = "confidence"), n=3))
save.image("C:/Users/Shan/Desktop/Spring 22/Data Mining 2/Homework 1/Homework1/.RData")
